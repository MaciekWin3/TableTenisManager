@page "/players"
@inject HttpClient http

@using System.IO 
@using Syncfusion.Blazor.Grids
@using System.ComponentModel.DataAnnotations;
@inject NavigationManager navigation


<h3 class="text-center">Players List</h3>

@if (players == null)
{
    <p class="text-center">Loading...</p>
}
else if (players.Count == 0)
{
    <p>No players to display</p>
}
else
{
    <div class="container">
        <div class="row">
            <table class="table">
                <thead class="thead-light">
                    <tr>
                        <th scope="col">Name</th>
                        <th scope="col">Surname</th>
                        <th scope="col">Points</th>
                        <th scope="col">Country</th>
                        <th scope="col">Date Of Birth</th>
                        <th scope="col">Info</th>
                        <th scope="col">Edit</th>
                        <th scope="col">Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var player in players)
                    {
                    <tr>
                        <td>@player.FirstName</td>
                        <td>@player.Surname</td>
                        <td>@player.Points</td>
                        <td>@player.Country</td>
                        <td>@player.DateOfBirth.ToString("dd/MM/yyyy")</td>
                        <td><button type="button" @onclick="@(() => navigation.NavigateTo($"players/{player.Id}"))" class="btn btn-outline-info">Info</button></td>
                        <td><button type="button" @onclick="@(() => navigation.NavigateTo($"players/edit/{player.Id}"))" class="btn btn-outline-warning">Edit</button></td>
                        <td><button type="button" @onclick="@(() => DeletePlayer(player))" class="btn btn-outline-danger">Delete</button></td>
                    </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}


@code{

    //Player[] players { get; set; }
    public List<Player> players { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadPlayers();
    }

    async Task LoadPlayers()
    {
        players = await http.GetJsonAsync<List<Player>>("api/players");
    }

    async Task DeletePlayer(Player player)
    {

        //int index = player.PicturePath.LastIndexOf('/');
        //string imgPath = "";

        //if (index != -1)
        //{
        //    Console.WriteLine(player.PicturePath.Substring(0, index)); // "My. name. is Bond"
        //    imgPath = player.PicturePath.Substring(index + 1); // "_James Bond!"
        //}
        //string rootPath = @"F:/Pobrane F/TableTenisApp/TableTenisApp/Server/wwwroot/Images/";

        //string path = rootPath + imgPath;
        //string backslash = @"\";
        //path = path.Replace('/', backslash[0]);
        //File.Delete(path);
        await http.DeleteAsync($"api/players/{player.Id}");
        await LoadPlayers();
    }
}